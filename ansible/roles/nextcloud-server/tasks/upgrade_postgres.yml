---

- name: Set default postgres_dump_dir, if not provided
  set_fact:
    postgres_dump_dir: "/tmp"
  when: "postgres_dump_dir|default('') == ''"

- name: Set postgres_dump_name, if not provided
  set_fact:
    postgres_dump_name: "nextcloud-postgres.out"
  when: "postgres_dump_name|default('') == ''"

- name: Set postgres_auto_upgrade_backup_data_path, if not provided
  set_fact:
    postgres_auto_upgrade_backup_data_path: "{{ nextcloud_postgres_data_path }}-auto-upgrade-backup"
  when: "postgres_auto_upgrade_backup_data_path|default('') == ''"

- name: Set postgres_start_wait_time, if not provided
  set_fact:
    postgres_start_wait_time: 15
  when: "postgres_start_wait_time|default('') == ''"

- name: Set postgres_force_upgrade, if not provided
  set_fact:
    postgres_force_upgrade: false
  when: "postgres_force_upgrade|default('') == ''"

- name: Check Postgres auto-upgrade backup data directory
  stat:
    path: "{{ postgres_auto_upgrade_backup_data_path }}"
  register: result_auto_upgrade_path

- name: Abort, if existing Postgres auto-upgrade data path detected
  fail:
    msg: "Detected that a left-over {{ postgres_auto_upgrade_backup_data_path }} exists. You should rename it to {{ nextcloud_postgres_data_path }} if the previous upgrade went wrong, or delete it if it went well."
  when: "result_auto_upgrade_path.stat.exists"

- import_tasks: tasks/util/detect_existing_postgres_version.yml

- name: Abort, if no existing Postgres version detected
  fail:
    msg: "Could not find existing Postgres installation"
  when: "not nextcloud_postgres_detected_existing|bool"

- name: Abort, if already at latest Postgres version
  fail:
    msg: "You are already running the latest Postgres version supported ({{ nextcloud_postgres_docker_image_latest }}). Nothing to do"
  when: "nextcloud_postgres_detected_version_corresponding_docker_image == nextcloud_postgres_docker_image_latest and not postgres_force_upgrade"

- debug:
    msg: "Upgrading database from {{ nextcloud_postgres_detected_version_corresponding_docker_image }} to {{ nextcloud_postgres_docker_image_latest }}"

- name: Ensure nextcloud-apache is stopped
  service: name=nextcloud-apache state=stopped

- name: Ensure nextcloud-postgres is started
  service: name=nextcloud-postgres state=started daemon_reload=yes

- name: Wait a bit, so that Postgres can start
  wait_for:
    timeout: "{{ postgres_start_wait_time }}"
  delegate_to: 127.0.0.1
  become: false

- name: Perform Postgres database dump
  command: >-
    /usr/bin/env docker run --rm --name nextcloud-postgres-dump
    --log-driver=none
    --network={{ nextcloud_docker_network }}
    --env-file={{ nextcloud_environment_variables_data_path }}/env-postgres-pgsql-docker
    --entrypoint=/bin/sh
    --mount type=bind,src={{ postgres_dump_dir }},dst=/out
    {{ nextcloud_postgres_detected_version_corresponding_docker_image }}
    -c "pg_dumpall -h nextcloud-postgres
    {{ '| gzip -c ' if postgres_dump_name.endswith('.gz') else '' }}
    > /out/{{ postgres_dump_name }}"

- name: Ensure nextcloud-postgres is stopped
  service: name=nextcloud-postgres state=stopped

- name: Rename existing Postgres data directory
  command: "mv {{ nextcloud_postgres_data_path }} {{ postgres_auto_upgrade_backup_data_path }}"

- debug:
    msg: "NOTE: Your Postgres data directory has been moved from `{{ nextcloud_postgres_data_path }}` to `{{ postgres_auto_upgrade_backup_data_path }}`. In the event of failure, you can move it back and run the playbook with --tags=setup-postgres to restore operation."

- include: tasks/setup_postgres.yml

- name: Ensure nextcloud-postgres autoruns and is restarted
  service: name=nextcloud-postgres enabled=yes state=restarted daemon_reload=yes

- name: Wait a bit, so that Postgres can start
  wait_for:
    timeout: "{{ postgres_start_wait_time }}"
  delegate_to: 127.0.0.1
  become: false

# Starting the database container had automatically created the default
# role (`nextcloud_postgres_connection_username`) and database (`nextcloud_postgres_db_name`).
# The dump most likely contains those same entries and would try to re-create them, leading to errors.
# We need to skip over those lines.
- name: Generate Postgres database import command
  set_fact:
    nextcloud_postgres_import_command: >-
      /usr/bin/env docker run --rm --name nextcloud-postgres-import
      --log-driver=none
      --cap-drop=ALL
      --network={{ nextcloud_docker_network }}
      --env-file={{ nextcloud_environment_variables_data_path }}/env-postgres-pgsql-docker
      --entrypoint=/bin/sh
      --mount type=bind,src={{ postgres_dump_dir }},dst=/in,ro
      {{ nextcloud_postgres_docker_image_latest }}
      -c "cat /in/{{ postgres_dump_name }} |
      {{ 'gunzip |' if postgres_dump_name.endswith('.gz') else '' }}
      grep -vE '^CREATE ROLE {{ nextcloud_postgres_connection_username }}' |
      grep -vE '^CREATE DATABASE {{ nextcloud_postgres_db_name }}' |
      psql -v ON_ERROR_STOP=1 -h nextcloud-postgres"

# This is a hack.
# See: https://ansibledaily.com/print-to-standard-output-without-escaping/
#
# We want to run `debug: msg=".."`, but that dumps it as JSON and escapes double quotes within it,
# which ruins the command (`nextcloud_postgres_import_command`)
- name: Note about Postgres importing
  set_fact:
    dummy: true
  with_items:
    - >-
        Importing Postgres database using the following command: `{{ nextcloud_postgres_import_command }}`.
        If this crashes, you can stop Postgres (`systemctl stop nextcloud-postgres`),
        delete the new database data (`rm -rf {{ nextcloud_postgres_data_path }}`)
        and restore the automatically-made backup (`mv {{ postgres_auto_upgrade_backup_data_path }} {{ nextcloud_postgres_data_path }}`).

- name: Perform Postgres database import
  command: "{{ nextcloud_postgres_import_command }}"

- name: Delete Postgres database dump file
  file:
    path: "{{ postgres_dump_dir }}/{{ postgres_dump_name }}"
    state: absent

- name: Ensure nextcloud-apache is started
  service:
    name: nextcloud-apache
    state: started
    daemon_reload: yes

- debug:
    msg: "NOTE: Your old Postgres data directory is preserved at `{{ postgres_auto_upgrade_backup_data_path }}`. You might want to get rid of it once you've confirmed that all is well."
