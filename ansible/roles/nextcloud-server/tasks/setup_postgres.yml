---

- import_tasks: "{{ role_path }}/tasks/util/detect_existing_postgres_version.yml"

# If we have found an existing version (installed from before), we use its corresponding Docker image.
# If not, we install using the latest Postgres.
#
# Upgrading is supposed to be performed separately and explicitly (see `upgrade_postgres.yml`).
- set_fact:
    nextcloud_postgres_docker_image_to_use: "{{ nextcloud_postgres_docker_image_latest if nextcloud_postgres_detected_version_corresponding_docker_image == '' else nextcloud_postgres_detected_version_corresponding_docker_image }}"

- name: Ensure postgres data path exists
  file:
    path: "{{ nextcloud_postgres_data_path }}"
    state: directory
    mode: 0700
    owner: "{{ nextcloud_user_username }}"
    group: "{{ nextcloud_user_username }}"

- name: Ensure postgres Docker image is pulled
  docker_image:
    name: "{{ nextcloud_postgres_docker_image_to_use }}"
    source: "{{ 'pull' if ansible_version.major > 2 or ansible_version.minor > 7 else omit }}"

- name: Ensure Postgres environment variables file created
  template:
    src: "{{ role_path }}/templates/env/{{ item }}.j2"
    dest: "{{ nextcloud_environment_variables_data_path }}/{{ item }}"
    mode: 0640
  with_items:
    - "env-postgres-pgsql-docker"
    - "env-postgres-server-docker"

- name: Ensure nextcloud-postgres-cli script created
  template:
    src: "{{ role_path }}/templates/usr-local-bin/nextcloud-postgres-cli.j2"
    dest: "/usr/local/bin/nextcloud-postgres-cli"
    mode: 0750

- name: Ensure nextcloud-postgres.service installed
  template:
    src: "{{ role_path }}/templates/systemd/nextcloud-postgres.service.j2"
    dest: "/etc/systemd/system/nextcloud-postgres.service"
    mode: 0644
